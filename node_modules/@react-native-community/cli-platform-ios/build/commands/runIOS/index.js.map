{"version":3,"names":["runIOS","_","ctx","args","project","ios","CLIError","binaryPath","path","isAbsolute","join","root","fs","existsSync","xcodeProject","sourceDir","process","chdir","inferredSchemeName","basename","name","extname","scheme","logger","info","isWorkspace","chalk","bold","devices","getDevices","device","udid","bootedDevices","filter","type","simulators","getSimulators","bootedSimulators","Object","keys","map","key","reduce","acc","val","concat","state","booted","length","runOnSimulator","runOnBootedDevicesSimulators","error","find","d","printFoundDevices","runOnDevice","physicalDevices","matchingDevice","out","execa","sync","parseXctraceIOSDevicesList","stderr","stdout","e","warn","parseIOSDevicesList","JSON","parse","child_process","execFileSync","encoding","simulator","selectedSimulator","fallbackSimulators","matchingSimulator","fallback","findMatchingSimulator","activeDeveloperDir","trim","bootSimulator","buildOutput","appPath","buildProject","getBuildPath","configuration","spawnSync","stdio","bundleID","result","status","success","toString","selectedDevice","isIOSDeployInstalled","appProcess","spawn","detached","unref","iosDeployInstallArgs","iosDeployOutput","message","Promise","resolve","reject","xcodebuildArgs","xcconfig","buildFolder","loader","ora","dim","xcodebuildOutputFormatter","verbose","xcbeautifyAvailable","xcprettyAvailable","buildProcess","getProcessOptions","errorOutput","on","data","stringData","stdin","write","isVerbose","debug","start","repeat","code","end","stop","undefined","simulatorFullName","formattedDeviceName","getTargetPaths","buildSettings","settings","i","wrapperExtension","WRAPPER_EXTENSION","targetBuildDir","TARGET_BUILD_DIR","executableFolderPath","EXECUTABLE_FOLDER_PATH","isCatalyst","getPlatformName","platformNameMatch","exec","execSync","deviceName","firstIOSDevice","deviceByName","String","version","packager","terminal","port","env","RCT_TERMINAL","RCT_METRO_PORT","RCT_NO_LAUNCH_PACKAGER","description","func","examples","desc","cmd","options","default","Number","getDefaultUserTerminal"],"sources":["../../../src/commands/runIOS/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport child_process, {\n  ChildProcess,\n  SpawnOptionsWithoutStdio,\n} from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport {Config, IOSProjectInfo} from '@react-native-community/cli-types';\nimport parseIOSDevicesList from './parseIOSDevicesList';\nimport parseXctraceIOSDevicesList from './parseXctraceIOSDevicesList';\nimport findMatchingSimulator from './findMatchingSimulator';\nimport {\n  logger,\n  CLIError,\n  getDefaultUserTerminal,\n} from '@react-native-community/cli-tools';\nimport {Device} from '../../types';\nimport ora from 'ora';\nimport execa from 'execa';\n\ntype FlagsT = {\n  simulator?: string;\n  configuration: string;\n  scheme?: string;\n  projectPath: string;\n  device?: string | true;\n  udid?: string;\n  packager: boolean;\n  verbose: boolean;\n  port: number;\n  binaryPath?: string;\n  terminal: string | undefined;\n  xcconfig?: string;\n  buildFolder?: string;\n};\n\nfunction runIOS(_: Array<string>, ctx: Config, args: FlagsT) {\n  if (!ctx.project.ios) {\n    throw new CLIError(\n      'iOS project folder not found. Are you sure this is a React Native project?',\n    );\n  }\n\n  if (args.binaryPath) {\n    args.binaryPath = path.isAbsolute(args.binaryPath)\n      ? args.binaryPath\n      : path.join(ctx.root, args.binaryPath);\n\n    if (!fs.existsSync(args.binaryPath)) {\n      throw new CLIError(\n        'binary-path was specified, but the file was not found.',\n      );\n    }\n  }\n\n  const {xcodeProject, sourceDir} = ctx.project.ios;\n\n  process.chdir(sourceDir);\n\n  if (!xcodeProject) {\n    throw new CLIError(\n      `Could not find Xcode project files in \"${sourceDir}\" folder`,\n    );\n  }\n\n  const inferredSchemeName = path.basename(\n    xcodeProject.name,\n    path.extname(xcodeProject.name),\n  );\n  const scheme = args.scheme || inferredSchemeName;\n\n  logger.info(\n    `Found Xcode ${\n      xcodeProject.isWorkspace ? 'workspace' : 'project'\n    } \"${chalk.bold(xcodeProject.name)}\"`,\n  );\n\n  const devices = getDevices();\n\n  if (!args.device && !args.udid) {\n    const bootedDevices = devices.filter(({type}) => type === 'device');\n\n    const simulators = getSimulators();\n    const bootedSimulators = Object.keys(simulators.devices)\n      .map((key) => simulators.devices[key])\n      .reduce((acc, val) => acc.concat(val), [])\n      .filter(({state}) => state === 'Booted');\n\n    const booted = [...bootedDevices, ...bootedSimulators];\n    if (booted.length === 0) {\n      logger.info(\n        'No booted devices or simulators found. Launching first available simulator...',\n      );\n      return runOnSimulator(xcodeProject, scheme, args);\n    }\n\n    logger.info(`Found booted ${booted.map(({name}) => name).join(', ')}`);\n\n    return runOnBootedDevicesSimulators(\n      scheme,\n      xcodeProject,\n      args,\n      bootedDevices,\n      bootedSimulators,\n    );\n  }\n\n  if (args.device && args.udid) {\n    return logger.error(\n      'The `device` and `udid` options are mutually exclusive.',\n    );\n  }\n\n  if (args.udid) {\n    const device = devices.find((d) => d.udid === args.udid);\n    if (!device) {\n      return logger.error(\n        `Could not find a device with udid: \"${chalk.bold(\n          args.udid,\n        )}\". ${printFoundDevices(devices)}`,\n      );\n    }\n    if (device.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, args);\n    } else {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  } else {\n    const physicalDevices = devices.filter((d) => d.type !== 'simulator');\n    const device = matchingDevice(physicalDevices, args.device);\n    if (device) {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  }\n}\n\nconst getDevices = () => {\n  let devices;\n  try {\n    const out = execa.sync('xcrun', ['xctrace', 'list', 'devices']);\n    devices = parseXctraceIOSDevicesList(\n      // Xcode 12.5 introduced a change to output the list to stdout instead of stderr\n      out.stderr === '' ? out.stdout : out.stderr,\n    );\n  } catch (e) {\n    logger.warn(\n      'Support for Xcode 11 and older is deprecated. Please upgrade to Xcode 12.',\n    );\n    devices = parseIOSDevicesList(\n      execa.sync('xcrun', ['instruments', '-s']).stdout,\n    );\n  }\n  return devices;\n};\n\nconst getSimulators = () => {\n  let simulators: {devices: {[index: string]: Array<Device>}};\n  try {\n    simulators = JSON.parse(\n      child_process.execFileSync(\n        'xcrun',\n        ['simctl', 'list', '--json', 'devices'],\n        {encoding: 'utf8'},\n      ),\n    );\n  } catch (error) {\n    throw new CLIError(\n      'Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.',\n      error,\n    );\n  }\n  return simulators;\n};\n\nasync function runOnBootedDevicesSimulators(\n  scheme: string,\n  xcodeProject: IOSProjectInfo,\n  args: FlagsT,\n  devices: Device[],\n  simulators: Device[],\n) {\n  for (const device of devices) {\n    await runOnDevice(device, scheme, xcodeProject, args);\n  }\n\n  for (const simulator of simulators) {\n    await runOnSimulator(xcodeProject, scheme, args, simulator);\n  }\n}\n\nasync function runOnSimulator(\n  xcodeProject: IOSProjectInfo,\n  scheme: string,\n  args: FlagsT,\n  simulator?: Device,\n) {\n  let selectedSimulator;\n\n  if (simulator) {\n    selectedSimulator = simulator;\n  } else {\n    const simulators = getSimulators();\n\n    /**\n     * If provided simulator does not exist, try simulators in following order\n     * - iPhone 14\n     * - iPhone 13\n     * - iPhone 12\n     * - iPhone 11\n     */\n    const fallbackSimulators = [\n      'iPhone 14',\n      'iPhone 13',\n      'iPhone 12',\n      'iPhone 11',\n    ];\n\n    selectedSimulator = fallbackSimulators.reduce(\n      (matchingSimulator, fallback) => {\n        return (\n          matchingSimulator ||\n          findMatchingSimulator(simulators, {simulator: fallback})\n        );\n      },\n      findMatchingSimulator(simulators, args),\n    );\n  }\n\n  if (!selectedSimulator) {\n    throw new CLIError(\n      `No simulator available with ${\n        args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`\n      }`,\n    );\n  }\n\n  /**\n   * Booting simulator through `xcrun simctl boot` will boot it in the `headless` mode\n   * (running in the background).\n   *\n   * In order for user to see the app and the simulator itself, we have to make sure\n   * that the Simulator.app is running.\n   *\n   * We also pass it `-CurrentDeviceUDID` so that when we launch it for the first time,\n   * it will not boot the \"default\" device, but the one we set. If the app is already running,\n   * this flag has no effect.\n   */\n  const activeDeveloperDir = child_process\n    .execFileSync('xcode-select', ['-p'], {encoding: 'utf8'})\n    .trim();\n\n  child_process.execFileSync('open', [\n    `${activeDeveloperDir}/Applications/Simulator.app`,\n    '--args',\n    '-CurrentDeviceUDID',\n    selectedSimulator.udid,\n  ]);\n\n  if (!selectedSimulator.booted) {\n    bootSimulator(selectedSimulator);\n  }\n\n  let buildOutput, appPath;\n  if (!args.binaryPath) {\n    buildOutput = await buildProject(\n      xcodeProject,\n      selectedSimulator.udid,\n      scheme,\n      args,\n    );\n\n    appPath = getBuildPath(\n      xcodeProject,\n      args.configuration,\n      buildOutput,\n      scheme,\n    );\n  } else {\n    appPath = args.binaryPath;\n  }\n\n  logger.info(\n    `Installing \"${chalk.bold(appPath)} on ${selectedSimulator.name}\"`,\n  );\n\n  child_process.spawnSync(\n    'xcrun',\n    ['simctl', 'install', selectedSimulator.udid, appPath],\n    {stdio: 'inherit'},\n  );\n\n  const bundleID = child_process\n    .execFileSync(\n      '/usr/libexec/PlistBuddy',\n      ['-c', 'Print:CFBundleIdentifier', path.join(appPath, 'Info.plist')],\n      {encoding: 'utf8'},\n    )\n    .trim();\n\n  logger.info(`Launching \"${chalk.bold(bundleID)}\"`);\n\n  const result = child_process.spawnSync('xcrun', [\n    'simctl',\n    'launch',\n    selectedSimulator.udid,\n    bundleID,\n  ]);\n\n  if (result.status === 0) {\n    logger.success('Successfully launched the app on the simulator');\n  } else {\n    logger.error(\n      'Failed to launch the app on simulator',\n      result.stderr.toString(),\n    );\n  }\n}\n\nasync function runOnDevice(\n  selectedDevice: Device,\n  scheme: string,\n  xcodeProject: IOSProjectInfo,\n  args: FlagsT,\n) {\n  if (args.binaryPath && selectedDevice.type === 'catalyst') {\n    throw new CLIError(\n      'binary-path was specified for catalyst device, which is not supported.',\n    );\n  }\n\n  const isIOSDeployInstalled = child_process.spawnSync(\n    'ios-deploy',\n    ['--version'],\n    {encoding: 'utf8'},\n  );\n\n  if (isIOSDeployInstalled.error) {\n    throw new CLIError(\n      `Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${chalk.bold(\n        'npm install -g ios-deploy',\n      )}\" and try again.`,\n    );\n  }\n\n  if (selectedDevice.type === 'catalyst') {\n    const buildOutput = await buildProject(\n      xcodeProject,\n      selectedDevice.udid,\n      scheme,\n      args,\n    );\n\n    const appPath = getBuildPath(\n      xcodeProject,\n      args.configuration,\n      buildOutput,\n      scheme,\n      true,\n    );\n    const appProcess = child_process.spawn(`${appPath}/${scheme}`, [], {\n      detached: true,\n      stdio: 'ignore',\n    });\n    appProcess.unref();\n  } else {\n    let buildOutput, appPath;\n    if (!args.binaryPath) {\n      buildOutput = await buildProject(\n        xcodeProject,\n        selectedDevice.udid,\n        scheme,\n        args,\n      );\n\n      appPath = getBuildPath(\n        xcodeProject,\n        args.configuration,\n        buildOutput,\n        scheme,\n      );\n    } else {\n      appPath = args.binaryPath;\n    }\n\n    const iosDeployInstallArgs = [\n      '--bundle',\n      appPath,\n      '--id',\n      selectedDevice.udid,\n      '--justlaunch',\n    ];\n\n    logger.info(`Installing and launching your app on ${selectedDevice.name}`);\n\n    const iosDeployOutput = child_process.spawnSync(\n      'ios-deploy',\n      iosDeployInstallArgs,\n      {encoding: 'utf8'},\n    );\n\n    if (iosDeployOutput.error) {\n      throw new CLIError(\n        `Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${iosDeployOutput.error.message}`,\n      );\n    }\n  }\n\n  return logger.success('Installed the app on the device.');\n}\n\nfunction buildProject(\n  xcodeProject: IOSProjectInfo,\n  udid: string | undefined,\n  scheme: string,\n  args: FlagsT,\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const xcodebuildArgs = [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      ...(args.xcconfig ? ['-xcconfig', args.xcconfig] : []),\n      ...(args.buildFolder ? ['-derivedDataPath', args.buildFolder] : []),\n      '-configuration',\n      args.configuration,\n      '-scheme',\n      scheme,\n      '-destination',\n      `id=${udid}`,\n    ];\n    // @todo use `getLoader` from cli-tools package\n    const loader = ora();\n    logger.info(\n      `Building ${chalk.dim(\n        `(using \"xcodebuild ${xcodebuildArgs.join(' ')}\")`,\n      )}`,\n    );\n    let xcodebuildOutputFormatter: ChildProcess | any;\n    if (!args.verbose) {\n      if (xcbeautifyAvailable()) {\n        xcodebuildOutputFormatter = child_process.spawn('xcbeautify', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n      } else if (xcprettyAvailable()) {\n        xcodebuildOutputFormatter = child_process.spawn('xcpretty', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n      }\n    }\n    const buildProcess = child_process.spawn(\n      'xcodebuild',\n      xcodebuildArgs,\n      getProcessOptions(args),\n    );\n    let buildOutput = '';\n    let errorOutput = '';\n    buildProcess.stdout.on('data', (data: Buffer) => {\n      const stringData = data.toString();\n      buildOutput += stringData;\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.write(data);\n      } else {\n        if (logger.isVerbose()) {\n          logger.debug(stringData);\n        } else {\n          loader.start(\n            `Building the app${'.'.repeat(buildOutput.length % 10)}`,\n          );\n        }\n      }\n    });\n    buildProcess.stderr.on('data', (data: Buffer) => {\n      errorOutput += data;\n    });\n    buildProcess.on('close', (code: number) => {\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.end();\n      } else {\n        loader.stop();\n      }\n      if (code !== 0) {\n        reject(\n          new CLIError(\n            `\n            Failed to build iOS project.\n\n            We ran \"xcodebuild\" command but it exited with error code ${code}. To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            ${xcodeProject.name}.\n          `,\n            xcodebuildOutputFormatter\n              ? undefined\n              : buildOutput + '\\n' + errorOutput,\n          ),\n        );\n        return;\n      }\n      logger.success('Successfully built the app');\n      resolve(buildOutput);\n    });\n  });\n}\n\nfunction bootSimulator(selectedSimulator: Device) {\n  const simulatorFullName = formattedDeviceName(selectedSimulator);\n  logger.info(`Launching ${simulatorFullName}`);\n\n  child_process.spawnSync('xcrun', ['simctl', 'boot', selectedSimulator.udid]);\n}\n\nfunction getTargetPaths(buildSettings: string) {\n  const settings = JSON.parse(buildSettings);\n\n  // Find app in all building settings - look for WRAPPER_EXTENSION: 'app',\n  for (const i in settings) {\n    const wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n\n    if (wrapperExtension === 'app') {\n      return {\n        targetBuildDir: settings[i].buildSettings.TARGET_BUILD_DIR,\n        executableFolderPath: settings[i].buildSettings.EXECUTABLE_FOLDER_PATH,\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction getBuildPath(\n  xcodeProject: IOSProjectInfo,\n  configuration: string,\n  buildOutput: string,\n  scheme: string,\n  isCatalyst: boolean = false,\n) {\n  const buildSettings = child_process.execFileSync(\n    'xcodebuild',\n    [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      '-scheme',\n      scheme,\n      '-sdk',\n      getPlatformName(buildOutput),\n      '-configuration',\n      configuration,\n      '-showBuildSettings',\n      '-json',\n    ],\n    {encoding: 'utf8'},\n  );\n  const {targetBuildDir, executableFolderPath} = getTargetPaths(buildSettings);\n\n  if (!targetBuildDir) {\n    throw new CLIError('Failed to get the target build directory.');\n  }\n\n  if (!executableFolderPath) {\n    throw new CLIError('Failed to get the app name.');\n  }\n\n  return `${targetBuildDir}${\n    isCatalyst ? '-maccatalyst' : ''\n  }/${executableFolderPath}`;\n}\n\nfunction getPlatformName(buildOutput: string) {\n  // Xcode can sometimes escape `=` with a backslash or put the value in quotes\n  const platformNameMatch = /export PLATFORM_NAME\\\\?=\"?(\\w+)\"?$/m.exec(\n    buildOutput,\n  );\n  if (!platformNameMatch) {\n    throw new CLIError(\n      'Couldn\\'t find \"PLATFORM_NAME\" variable in xcodebuild output. Please report this issue and run your project with Xcode instead.',\n    );\n  }\n  return platformNameMatch[1];\n}\n\nfunction xcbeautifyAvailable() {\n  try {\n    child_process.execSync('xcbeautify --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction xcprettyAvailable() {\n  try {\n    child_process.execSync('xcpretty --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction matchingDevice(\n  devices: Array<Device>,\n  deviceName: string | true | undefined,\n) {\n  if (deviceName === true) {\n    const firstIOSDevice = devices.find((d) => d.type === 'device')!;\n    if (firstIOSDevice) {\n      logger.info(\n        `Using first available device named \"${chalk.bold(\n          firstIOSDevice.name,\n        )}\" due to lack of name supplied.`,\n      );\n      return firstIOSDevice;\n    } else {\n      logger.error('No iOS devices connected.');\n      return undefined;\n    }\n  }\n  const deviceByName = devices.find(\n    (device) =>\n      device.name === deviceName || formattedDeviceName(device) === deviceName,\n  );\n  if (!deviceByName) {\n    logger.error(\n      `Could not find a device named: \"${chalk.bold(\n        String(deviceName),\n      )}\". ${printFoundDevices(devices)}`,\n    );\n  }\n  return deviceByName;\n}\n\nfunction formattedDeviceName(simulator: Device) {\n  return simulator.version\n    ? `${simulator.name} (${simulator.version})`\n    : simulator.name;\n}\n\nfunction printFoundDevices(devices: Array<Device>) {\n  return [\n    'Available devices:',\n    ...devices.map((device) => `  - ${device.name} (${device.udid})`),\n  ].join('\\n');\n}\n\nfunction getProcessOptions({\n  packager,\n  terminal,\n  port,\n}: {\n  packager: boolean;\n  terminal: string | undefined;\n  port: number;\n}): SpawnOptionsWithoutStdio {\n  if (packager) {\n    return {\n      env: {\n        ...process.env,\n        RCT_TERMINAL: terminal,\n        RCT_METRO_PORT: port.toString(),\n      },\n    };\n  }\n\n  return {\n    env: {\n      ...process.env,\n      RCT_TERMINAL: terminal,\n      RCT_NO_LAUNCH_PACKAGER: 'true',\n    },\n  };\n}\n\nexport default {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [\n    {\n      desc: 'Run on a different simulator, e.g. iPhone SE (2nd generation)',\n      cmd: 'react-native run-ios --simulator \"iPhone SE (2nd generation)\"',\n    },\n    {\n      desc: \"Run on a connected device, e.g. Max's iPhone\",\n      cmd: 'react-native run-ios --device \"Max\\'s iPhone\"',\n    },\n    {\n      desc: 'Run on the AppleTV simulator',\n      cmd:\n        'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"',\n    },\n  ],\n  options: [\n    {\n      name: '--simulator <string>',\n      description:\n        'Explicitly set simulator to use. Optionally include iOS version between ' +\n        'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"',\n      default: 'iPhone 14',\n    },\n    {\n      name: '--configuration <string>',\n      description: 'Explicitly set the scheme configuration to use',\n      default: 'Debug',\n    },\n    {\n      name: '--scheme <string>',\n      description: 'Explicitly set Xcode scheme to use',\n    },\n    {\n      name: '--device [string]',\n      description:\n        'Explicitly set device to use by name.  The value is not required if you have a single device connected.',\n    },\n    {\n      name: '--udid <string>',\n      description: 'Explicitly set device to use by udid',\n    },\n    {\n      name: '--no-packager',\n      description: 'Do not launch packager while building',\n    },\n    {\n      name: '--verbose',\n      description: 'Do not use xcbeautify or xcpretty even if installed',\n    },\n    {\n      name: '--port <number>',\n      default: process.env.RCT_METRO_PORT || 8081,\n      parse: Number,\n    },\n    {\n      name: '--binary-path <string>',\n      description:\n        'Path relative to project root where pre-built .app binary lives.',\n    },\n    {\n      name: '--terminal <string>',\n      description:\n        'Launches the Metro Bundler in a new window using the specified terminal path.',\n      default: getDefaultUserTerminal,\n    },\n    {\n      name: '--xcconfig [string]',\n      description: 'Explicitly set xcconfig to use',\n    },\n    {\n      name: '--buildFolder <string>',\n      description:\n        'Location for iOS build artifacts. Corresponds to Xcode\\'s \"-derivedDataPath\".',\n    },\n  ],\n};\n"],"mappings":"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"}